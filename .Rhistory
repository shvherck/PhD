theme(text = element_text(size=22),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
legend.position='bottom')
lineplotNJ
boxplotNJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")
dotplotNJ         = boxplotNJ + geom_point(pch = 21, position = position_dodge(0.75))
lineplotNJ        = dotplotNJ + geom_line(aes(group=fsubject), position=position_dodge(0), alpha=0.5) +
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
theme(text = element_text(size=22),
plot.title = element_text(hjust = 0.5),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
legend.position='bottom')
lineplotNJ
tiff("boxplot_individualsubjectsNJ_cons.tiff",width=800,height=800)                 #save figure in wd
print(lineplotNJ)
dev.off()
boxplotNJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")
dotplotNJ         = boxplotNJ + geom_point(pch = 21, position = position_dodge(0.75))
lineplotNJ        = dotplotNJ + geom_line(aes(group=fsubject), position=position_dodge(0), alpha=0.5) +
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
legend.position='bottom')
tiff("boxplot_individualsubjectsNJ_cons.tiff",width=800,height=800)                 #save figure in wd
print(lineplotNJ)
dev.off()
pd = ggplot2::position_jitterdodge(dodge.width = 0.75, jitter.width = 0.3, seed = 1)
boxplotJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")
dotplotJ         = boxplotJ + geom_point(aes(group=fsubject), pch = 21, position=pd)
lineplotJ        = dotplotJ + geom_line(aes(group=fsubject), position=pd, alpha=0.5)
lineplotJ
pd = ggplot2::position_jitterdodge(dodge.width = 0.75, jitter.width = 0.3, seed = 1)
boxplotJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")
dotplotJ         = boxplotJ + geom_point(aes(group=fsubject), pch = 21, position=pd)
lineplotJ        = dotplotJ + geom_line(aes(group=fsubject), position=pd, alpha=0.5) +
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
legend.position='bottom')
lineplotJ
#' boxplot with individual subject lines (jittered)
pd = ggplot2::position_jitterdodge(dodge.width = 0.75, jitter.width = 0.3, seed = 1)
boxplotJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")
dotplotJ         = boxplotJ + geom_point(aes(group=fsubject), pch = 21, position=pd)
lineplotJ        = dotplotJ + geom_line(aes(group=fsubject), position=pd, alpha=0.5) +
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
legend.position='bottom')
tiff("boxplot_individualsubjectsJ_cons.tiff",width=800,height=800)                 #save figure in wd
print(lineplotJ)
dev.off()
boxplotNJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")
dotplotNJ         = boxplotNJ + geom_point(pch = 21, position = position_dodge(0.75))
lineplotNJ        = dotplotNJ + geom_line(aes(group=fsubject), position=position_dodge(0), alpha=0.5) +
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
legend.position='bottom',
scale_fill_discrete(labels = c("pretest", "posttest", "consolidation test")))
lineplotNJ
boxplotNJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")
dotplotNJ         = boxplotNJ + geom_point(pch = 21, position = position_dodge(0.75))
lineplotNJ        = dotplotNJ + geom_line(aes(group=fsubject), position=position_dodge(0), alpha=0.5) +
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
scale_fill_discrete(labels = c("pretest", "posttest", "consolidation test")) +
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
legend.position='bottom')
lineplotNJ
boxplotNJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")
dotplotNJ         = boxplotNJ + geom_point(pch = 21, position = position_dodge(0.75))
lineplotNJ        = dotplotNJ + geom_line(aes(group=fsubject), position=position_dodge(0), alpha=0.5) +
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
scale_fill_discrete(labels = c("pretest", "posttest", "consolidation test")) +
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
legend.position='bottom')
tiff("boxplot_individualsubjectsNJ_cons.tiff",width=800,height=800)                 #save figure in wd
print(lineplotNJ)
dev.off()
#' boxplot with individual subject lines (jittered)
pd = ggplot2::position_jitterdodge(dodge.width = 0.75, jitter.width = 0.3, seed = 1)
boxplotJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")
dotplotJ         = boxplotJ + geom_point(aes(group=fsubject), pch = 21, position=pd)
lineplotJ        = dotplotJ + geom_line(aes(group=fsubject), position=pd, alpha=0.5) +
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
scale_fill_discrete(labels = c("pretest", "posttest", "consolidation test")) +
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),
axis.ticks.x=element_blank(),
axis.text.x=element_blank(),
legend.position='bottom')
tiff("boxplot_individualsubjectsJ_cons.tiff",width=800,height=800)                 #save figure in wd
print(lineplotJ)
dev.off()
head(d_testretest)
label           = c(11,12,21,22,31,32)
stimulus        = c(1,2,1,2,1,2)
d_testretest$testretest    = mapvalues(d_testretest$testretest, from = label, to = stimulus)
d_testretest               = subset(d_testretest, group < 4)
d_testretest$fsubject      = factor(d_testretest$subject)
d_testretest$fgroup        = factor(d_testretest$group,   levels = c(1,2,3), labels = c("GGEE", "GGNE", "AC"))
d_testretest$fprepost      = factor(d_testretest$prepost, levels = c(1,2,3),     labels = c("pre", "post", "cons"))
d_testretest$ftestretest   = factor(d_testretest$testretest, levels = c(1,2), labels = c("test", "retest"))
d_melt_testretest          = melt(d_testretest, id.var=c("fsubject", "fgroup", "fprepost", "ftestretest"), measure.var=c("threshold"))
d_wide_testretest          = cast(fsubject + fgroup + fprepost ~ ftestretest , data=d_melt_testretest, mean)
head(d_wide_testretest)
d_testretest
pre               = subset(d_testretest, fprepost == "pre")
pre_melt          = melt(pre, id.var=c("fsubject", "fgroup", "ftestretest"), measure.var=c("threshold"))
pre_wide          = cast(fsubject + fgroup ~ ftestretest , data=pre_melt, mean)
head(pre_wide)
post              = subset(d_testretest, fprepost == "post")
post_melt         = melt(post, id.var=c("fsubject", "fgroup", "ftestretest"), measure.var=c("threshold"))
post_wide         = cast(fsubject + fgroup ~ ftestretest , data=post_melt, mean)
head(post_wide)
cons              = subset(d_testretest, fprepost == "cons")
cons_melt         = melt(cons, id.var=c("fsubject", "fgroup", "ftestretest"), measure.var=c("threshold"))
cons_wide         = cast(fsubject + fgroup ~ ftestretest , data=cons_melt, mean)
head(cons_wide)
# correlation plot test retest
plot(d_wide_testretest$test, d_wide_testretest$retest, xlab="Test", ylab="Retest", main="Test-retest reliability")
plot(pre_wide$test, pre_wide$retest, xlab="Test", ylab="Retest", main="Test-retest reliability pre-test")
plot(post_wide$test, post_wide$retest, xlab="Test", ylab="Retest", main="Test-retest reliability post-test")
plot(cons_wide$test, cons_wide$retest, xlab="Test", ylab="Retest", main="Test-retest reliability consolidation test")
#' Load libraries
#library for Anova
library(car)
boxplotNJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")   #outlier shape is NA because we already have individual points
dotplotNJ         = boxplotNJ + geom_point(pch = 21, position = position_dodge(0.75))
lineplotNJ        = dotplotNJ + geom_line(aes(group=fsubject), position=position_dodge(0), alpha=0.5) +   #alpha makes the lines more see through
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
scale_fill_discrete(labels = c("pretest", "posttest", "consolidation test")) +   #change legend labels
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),   #center title
axis.ticks.x=element_blank(),   #we made the plot with test phase on the x axis and facetted by group, but changed the aes
axis.text.x=element_blank(),    #so that group seems to be on the x axis (hence we had to remove the test phase x axis labels and ticks)
legend.position='bottom')
lineplotNJ
tiff("boxplot_individualsubjectsJ_cons.tiff",width=800,height=800)                 #save figure in wd
pd = ggplot2::position_jitterdodge(dodge.width = 0.75, jitter.width = 0.3, seed = 1)
boxplotJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")   #outlier shape is NA because we already have individual points
dotplotJ         = boxplotJ + geom_point(aes(group=fsubject), pch = 21, position=pd)
lineplotJ        = dotplotJ + geom_line(aes(group=fsubject), position=pd, alpha=0.5) +   #alpha makes the lines more see through
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
scale_fill_discrete(labels = c("pretest", "posttest", "consolidation test")) +   #change legend labels
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),   #center title
axis.ticks.x=element_blank(),    #we made the plot with test phase on the x axis and facetted by group, but changed the aes
axis.text.x=element_blank(),     #so that group seems to be on the x axis (hence we had to remove the test phase x axis labels and ticks)
legend.position='bottom')
lineplotJ
pd = ggplot2::position_jitterdodge(dodge.width = 0.75, jitter.width = 0.3, seed = 1)
boxplotJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")   #outlier shape is NA because we already have individual points
dotplotJ         = boxplotJ + geom_point(aes(group=fsubject), pch = 21, position=pd)
lineplotJ        = dotplotJ + geom_line(aes(group=fsubject), position=pd, alpha=0.5) +   #alpha makes the lines more see through
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
scale_fill_discrete(labels = c("pretest", "posttest", "consolidation test")) +   #change legend labels
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),   #center title
axis.ticks.x=element_blank(),    #we made the plot with test phase on the x axis and facetted by group, but changed the aes
axis.text.x=element_blank(),     #so that group seems to be on the x axis (hence we had to remove the test phase x axis labels and ticks)
legend.position='bottom')
# load libraries -----------
#'## Load libraries
#'load library for Anova
library(car)
#'load library to read excel files
library(readxl)
library(writexl)
#'load libraries to reshape (plyr for splitting etc.)
library(reshape)
library(reshape2)
library(plyr)
library(dplyr)
library(tidyverse)
#'load library to plot
library(lattice)
library(ggplot2)
library(gridExtra)
library(sm)
#'load library for mixed models
library(lme4)
library(emmeans)
library(lmmeans)
library(lmerTest)
#'load library for robust lmm
library(robustlmm)
library(pbkrtest)
#'load library for robust anova & correlations
library(WRS2)
#'correlation matrix
library(corrplot)
source("http://www.sthda.com/upload/rquery_cormat.r") # necessary to use rquery.cormat
library(PerformanceAnalytics)
library(corrr)
# prepare data ------
#'## Prepare data
setwd(dir = "C:/Users/u0125029/Documents/3. Onderzoek/4. Consolidatie-test 2020/8. Analyses/1. Rise time")
d           = read_excel("RT_data_cons.xlsx")
colnames(d) = c("subject", "group", "testretest", "meantrials", "meanreversals")
d$subject   = sapply(strsplit(d$subject, split='_', fixed=TRUE), function(x) (x[1]))               #remove the '_1 / _2" from the subject name
head(d)                                                                                                  #x[1] indicates that you keep the part before '_', if you replace this by 2 you keep the part after '_'
# replace parameters/labels with thresholds
d$meanreversals = floor(d$meanreversals + 0.5)           #replacing the values only works with round labels
#r automatically rounds .5 down, working with floor(x + 0.5) rounds up from 0.5
label             = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,
20,21,22,23,24,25,26,27,28,29,30,31,32,33, 34,35,
36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)
stimulus          = c(699,648,600,555,514,476,441,408,378,350,324,300,
278,257,238,221,204,189,175,162,150,139,129,119,
110,102,95,88,81,75,70,64,60,55,51,47,44,41,38,
35,32,30,28,26,24,22,20,19,17,16)
d$threshold = mapvalues(d$meanreversals, from = label, to = stimulus)
# create prepost column
label           = c(11,12,21,22,31,32)
stimulus        = c(1,1,2,2,3,3)
d$prepost = mapvalues(d$testretest, from = label, to = stimulus)
d         = d[c("subject", "group", "prepost", "testretest", "meantrials", "meanreversals", "threshold")]
# write data
write_xlsx(d, "RT_cons_thresholds.xlsx")
d_testretest = d
# keep lowest threshold per subject + prepost combination (1 value for pretest and posttest per subject)
d <- merge(d, aggregate(threshold ~ subject + prepost, data = d, min))
# remove duplicates
d <- distinct(d, subject,prepost,threshold, .keep_all=TRUE)               # use diff <- setdiff(df1, df2) to compare the data frames
# and check removed rows
# write data
write_xlsx(d, "RT_cons_final.xlsx")
# prepare entire dataset for plotting
d$fgroup        = factor(d$group,   levels = c(1,2,3,4), labels = c("GGEE", "GGNE", "AC", "PC"))
d$fprepost      = factor(d$prepost, levels = c(1,2,3),     labels = c("pre", "post", "cons"))
d_pre           = subset(d, fprepost%in%c("pre"))   # add a column with pretest threshold to add as covariate
d$pretest       = d_pre$threshold[match(unlist(d$subject), d_pre$subject)]
d               = subset(d, fgroup%in%c('GGEE', 'GGNE', 'AC'))
d$fsubject      = factor(d$subject)   #first subset based on group and then factorize subject, otherwise R will still say fsubject
#contains 118 lines
d_melt          = melt(d, id.var=c("fsubject", "fgroup", "fprepost"), measure.var=c("threshold"))
d_wide          = cast(fsubject + fgroup ~ fprepost , data=d_melt, mean)
head(d_wide)
# prepare testretest dataset for plotting
head(d_testretest)
label           = c(11,12,21,22,31,32)
stimulus        = c(1,2,1,2,1,2)
d_testretest$testretest    = mapvalues(d_testretest$testretest, from = label, to = stimulus)
d_testretest               = subset(d_testretest, group < 4)
d_testretest$fsubject      = factor(d_testretest$subject)
d_testretest$fgroup        = factor(d_testretest$group,   levels = c(1,2,3), labels = c("GGEE", "GGNE", "AC"))
d_testretest$fprepost      = factor(d_testretest$prepost, levels = c(1,2,3),     labels = c("pre", "post", "cons"))
d_testretest$ftestretest   = factor(d_testretest$testretest, levels = c(1,2), labels = c("test", "retest"))
d_melt_testretest          = melt(d_testretest, id.var=c("fsubject", "fgroup", "fprepost", "ftestretest"), measure.var=c("threshold"))
d_wide_testretest          = cast(fsubject + fgroup + fprepost ~ ftestretest , data=d_melt_testretest, mean)
head(d_wide_testretest)
pre               = subset(d_testretest, fprepost == "pre")
pre_melt          = melt(pre, id.var=c("fsubject", "fgroup", "ftestretest"), measure.var=c("threshold"))
pre_wide          = cast(fsubject + fgroup ~ ftestretest , data=pre_melt, mean)
head(pre_wide)
post              = subset(d_testretest, fprepost == "post")
post_melt         = melt(post, id.var=c("fsubject", "fgroup", "ftestretest"), measure.var=c("threshold"))
post_wide         = cast(fsubject + fgroup ~ ftestretest , data=post_melt, mean)
head(post_wide)
cons              = subset(d_testretest, fprepost == "cons")
cons_melt         = melt(cons, id.var=c("fsubject", "fgroup", "ftestretest"), measure.var=c("threshold"))
cons_wide         = cast(fsubject + fgroup ~ ftestretest , data=cons_melt, mean)
head(cons_wide)
#' boxplot with individual subject lines (not jittered)
boxplotNJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")   #outlier shape is NA because we already have individual points
dotplotNJ         = boxplotNJ + geom_point(pch = 21, position = position_dodge(0.75))
lineplotNJ        = dotplotNJ + geom_line(aes(group=fsubject), position=position_dodge(0), alpha=0.5) +   #alpha makes the lines more see through
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
scale_fill_discrete(labels = c("pretest", "posttest", "consolidation test")) +   #change legend labels
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),   #center title
axis.ticks.x=element_blank(),   #we made the plot with test phase on the x axis and facetted by group, but changed the aes
axis.text.x=element_blank(),    #so that group seems to be on the x axis (hence we had to remove the test phase x axis labels and ticks)
legend.position='bottom')
lineplotNJ
pd = ggplot2::position_jitterdodge(dodge.width = 0.75, jitter.width = 0.3, seed = 1)
boxplotJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")   #outlier shape is NA because we already have individual points
dotplotJ         = boxplotJ + geom_point(aes(group=fsubject), pch = 21, position=pd)
lineplotJ        = dotplotJ + geom_line(aes(group=fsubject), position=pd, alpha=0.5) +   #alpha makes the lines more see through
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
scale_fill_discrete(labels = c("pretest", "posttest", "consolidation test")) +   #change legend labels
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),   #center title
axis.ticks.x=element_blank(),    #we made the plot with test phase on the x axis and facetted by group, but changed the aes
axis.text.x=element_blank(),     #so that group seems to be on the x axis (hence we had to remove the test phase x axis labels and ticks)
legend.position='bottom')
lineplotJ
#' boxplot with individual subject lines (jittered)
pd = ggplot2::position_jitterdodge(dodge.width = 0.75, jitter.width = 0.3, seed = 1)
boxplotJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")   #outlier shape is NA because we already have individual points
dotplotJ         = boxplotJ + geom_point(aes(group=fsubject), pch = 21, position=pd)
lineplotJ        = dotplotJ + geom_line(aes(group=fsubject), position=pd, alpha=0.5) +   #alpha makes the lines more see through
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
scale_fill_discrete(labels = c("pretest", "posttest", "consolidation test")) +   #change legend labels
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),   #center title
axis.ticks.x=element_blank(),    #we made the plot with test phase on the x axis and facetted by group, but changed the aes
axis.text.x=element_blank(),     #so that group seems to be on the x axis (hence we had to remove the test phase x axis labels and ticks)
legend.position='bottom')
lineplotJ
lineplotJ
# load libraries -----------
#'## Load libraries
#'load library for Anova
library(car)
#'load library to read excel files
library(readxl)
library(writexl)
#'load libraries to reshape (plyr for splitting etc.)
library(reshape)
library(reshape2)
library(plyr)
library(dplyr)
library(tidyverse)
#'load library to plot
library(lattice)
library(ggplot2)
library(gridExtra)
library(sm)
#'load library for mixed models
library(lme4)
library(emmeans)
library(lmmeans)
library(lmerTest)
#'load library for robust lmm
library(robustlmm)
library(pbkrtest)
#'load library for robust anova & correlations
library(WRS2)
#'correlation matrix
library(corrplot)
source("http://www.sthda.com/upload/rquery_cormat.r") # necessary to use rquery.cormat
library(PerformanceAnalytics)
library(corrr)
# prepare data ------
#'## Prepare data
setwd(dir = "C:/Users/u0125029/Documents/3. Onderzoek/4. Consolidatie-test 2020/8. Analyses/1. Rise time")
d           = read_excel("RT_data_cons.xlsx")
colnames(d) = c("subject", "group", "testretest", "meantrials", "meanreversals")
d$subject   = sapply(strsplit(d$subject, split='_', fixed=TRUE), function(x) (x[1]))               #remove the '_1 / _2" from the subject name
head(d)                                                                                                  #x[1] indicates that you keep the part before '_', if you replace this by 2 you keep the part after '_'
# replace parameters/labels with thresholds
d$meanreversals = floor(d$meanreversals + 0.5)           #replacing the values only works with round labels
#r automatically rounds .5 down, working with floor(x + 0.5) rounds up from 0.5
label             = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,
20,21,22,23,24,25,26,27,28,29,30,31,32,33, 34,35,
36,37,38,39,40,41,42,43,44,45,46,47,48,49,50)
stimulus          = c(699,648,600,555,514,476,441,408,378,350,324,300,
278,257,238,221,204,189,175,162,150,139,129,119,
110,102,95,88,81,75,70,64,60,55,51,47,44,41,38,
35,32,30,28,26,24,22,20,19,17,16)
d$threshold = mapvalues(d$meanreversals, from = label, to = stimulus)
# create prepost column
label           = c(11,12,21,22,31,32)
stimulus        = c(1,1,2,2,3,3)
d$prepost = mapvalues(d$testretest, from = label, to = stimulus)
d         = d[c("subject", "group", "prepost", "testretest", "meantrials", "meanreversals", "threshold")]
# write data
write_xlsx(d, "RT_cons_thresholds.xlsx")
d_testretest = d
# keep lowest threshold per subject + prepost combination (1 value for pretest and posttest per subject)
d <- merge(d, aggregate(threshold ~ subject + prepost, data = d, min))
# remove duplicates
d <- distinct(d, subject,prepost,threshold, .keep_all=TRUE)               # use diff <- setdiff(df1, df2) to compare the data frames
# and check removed rows
# write data
write_xlsx(d, "RT_cons_final.xlsx")
# prepare entire dataset for plotting
d$fgroup        = factor(d$group,   levels = c(1,2,3,4), labels = c("GGEE", "GGNE", "AC", "PC"))
d$fprepost      = factor(d$prepost, levels = c(1,2,3),     labels = c("pre", "post", "cons"))
d_pre           = subset(d, fprepost%in%c("pre"))   # add a column with pretest threshold to add as covariate
d$pretest       = d_pre$threshold[match(unlist(d$subject), d_pre$subject)]
d               = subset(d, fgroup%in%c('GGEE', 'GGNE', 'AC'))
d$fsubject      = factor(d$subject)   #first subset based on group and then factorize subject, otherwise R will still say fsubject
#contains 118 lines
d_melt          = melt(d, id.var=c("fsubject", "fgroup", "fprepost"), measure.var=c("threshold"))
d_wide          = cast(fsubject + fgroup ~ fprepost , data=d_melt, mean)
head(d_wide)
# prepare testretest dataset for plotting
head(d_testretest)
label           = c(11,12,21,22,31,32)
stimulus        = c(1,2,1,2,1,2)
d_testretest$testretest    = mapvalues(d_testretest$testretest, from = label, to = stimulus)
d_testretest               = subset(d_testretest, group < 4)
d_testretest$fsubject      = factor(d_testretest$subject)
d_testretest$fgroup        = factor(d_testretest$group,   levels = c(1,2,3), labels = c("GGEE", "GGNE", "AC"))
d_testretest$fprepost      = factor(d_testretest$prepost, levels = c(1,2,3),     labels = c("pre", "post", "cons"))
d_testretest$ftestretest   = factor(d_testretest$testretest, levels = c(1,2), labels = c("test", "retest"))
d_melt_testretest          = melt(d_testretest, id.var=c("fsubject", "fgroup", "fprepost", "ftestretest"), measure.var=c("threshold"))
d_wide_testretest          = cast(fsubject + fgroup + fprepost ~ ftestretest , data=d_melt_testretest, mean)
head(d_wide_testretest)
pre               = subset(d_testretest, fprepost == "pre")
pre_melt          = melt(pre, id.var=c("fsubject", "fgroup", "ftestretest"), measure.var=c("threshold"))
pre_wide          = cast(fsubject + fgroup ~ ftestretest , data=pre_melt, mean)
head(pre_wide)
post              = subset(d_testretest, fprepost == "post")
post_melt         = melt(post, id.var=c("fsubject", "fgroup", "ftestretest"), measure.var=c("threshold"))
post_wide         = cast(fsubject + fgroup ~ ftestretest , data=post_melt, mean)
head(post_wide)
cons              = subset(d_testretest, fprepost == "cons")
cons_melt         = melt(cons, id.var=c("fsubject", "fgroup", "ftestretest"), measure.var=c("threshold"))
cons_wide         = cast(fsubject + fgroup ~ ftestretest , data=cons_melt, mean)
head(cons_wide)
boxplotNJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")   #outlier shape is NA because we already have individual points
dotplotNJ         = boxplotNJ + geom_point(pch = 21, position = position_dodge(0.75))
lineplotNJ        = dotplotNJ + geom_line(aes(group=fsubject), position=position_dodge(0), alpha=0.5) +   #alpha makes the lines more see through
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
scale_fill_discrete(labels = c("pretest", "posttest", "consolidation test")) +   #change legend labels
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),   #center title
axis.ticks.x=element_blank(),   #we made the plot with test phase on the x axis and facetted by group, but changed the aes
axis.text.x=element_blank(),    #so that group seems to be on the x axis (hence we had to remove the test phase x axis labels and ticks)
legend.position='bottom')
lineplotNJ
pd = ggplot2::position_jitterdodge(dodge.width = 0.75, jitter.width = 0.3, seed = 1)
boxplotJ         = ggplot(d, aes(x=fprepost, y=threshold, fill=fprepost)) +
geom_boxplot(outlier.shape = NA) + theme_classic() + facet_wrap(. ~ fgroup, strip.position="bottom")   #outlier shape is NA because we already have individual points
dotplotJ         = boxplotJ + geom_point(aes(group=fsubject), pch = 21, position=pd)
lineplotJ        = dotplotJ + geom_line(aes(group=fsubject), position=pd, alpha=0.5) +   #alpha makes the lines more see through
labs(title="Rise time discrimination",x="group", y = "threshold (ms)", fill="test phase") +
scale_fill_discrete(labels = c("pretest", "posttest", "consolidation test")) +   #change legend labels
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),   #center title
axis.ticks.x=element_blank(),    #we made the plot with test phase on the x axis and facetted by group, but changed the aes
axis.text.x=element_blank(),     #so that group seems to be on the x axis (hence we had to remove the test phase x axis labels and ticks)
legend.position='bottom')
lineplotJ
#' raincloud plot
raincloud      = ggplot(d,aes(x=fprepost,y=threshold, fill = fprepost, colour = fprepost))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim = TRUE)
#' raincloud plot
source("R_rainclouds.R")
raincloud      = ggplot(d,aes(x=fprepost,y=threshold, fill = fprepost, colour = fprepost))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim = TRUE)
raincloud
raincloud      = ggplot(d,aes(x=fprepost,y=threshold, fill = fprepost, colour = fprepost))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim = FALSE)
raincloud
raincloud      = ggplot(d,aes(x=fprepost,y=threshold, fill = fprepost, colour = fprepost))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim = FALSE) +
ylab('threshold (ms)')+xlab('group')+theme_cowplot()+guides(fill = FALSE, colour = FALSE) + facet_wrap(~fgroup)
library(cowplot)
raincloud      = ggplot(d,aes(x=fprepost,y=threshold, fill = fprepost, colour = fprepost))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim = FALSE) +
ylab('threshold (ms)')+xlab('group')+theme_cowplot()+guides(fill = FALSE, colour = FALSE) + facet_wrap(~fgroup)
raincloud
raincloud      = ggplot(d,aes(x=fprepost,y=threshold, fill = fprepost, colour = fprepost))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim = FALSE) +
ylab('threshold (ms)')+xlab('group')+guides(fill = FALSE, colour = FALSE) + facet_wrap(~fgroup)
raincloud
raincloud      = ggplot(d,aes(x=fprepost,y=threshold, fill = fprepost, colour = fprepost))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim = FALSE) +
ylab('threshold (ms)')+xlab('group')+guides(fill = TRUE, colour = FALSE) + facet_wrap(~fgroup)
raincloud
raincloud      = ggplot(d,aes(x=fprepost,y=threshold, fill = fprepost, colour = fprepost))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim = FALSE) +
ylab('threshold (ms)')+xlab('group') + facet_wrap(~fgroup)
raincloud
raincloud      = ggplot(d,aes(x=fprepost,y=threshold, fill = fprepost, colour = fprepost))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim = FALSE) +
ylab('threshold (ms)')+xlab('group')+theme_classic+facet_wrap(~fgroup)
raincloud      = ggplot(d,aes(x=fprepost,y=threshold, fill = fprepost, colour = fprepost))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim = FALSE) +
ylab('threshold (ms)')+xlab('group')+theme_classic()+facet_wrap(~fgroup)
raincloud
raincloud      = ggplot(d,aes(x=fprepost,y=threshold, fill = fprepost, colour = fprepost))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim = FALSE) +
ylab('threshold (ms)')+xlab('group')+theme_classic()+facet_wrap(~fgroup,strip.position="bottom")
raincloud
raincloud      = ggplot(d,aes(x=fprepost,y=threshold, fill = fprepost, colour = fprepost))+
geom_flat_violin(position = position_nudge(x = .25, y = 0),adjust =2, trim = FALSE) +
ylab('threshold (ms)')+xlab('group')+theme_classic()+facet_wrap(~fgroup,strip.position="bottom") +
theme(text = element_text(size=30),
plot.title = element_text(hjust = 0.5),   #center title
axis.ticks.x=element_blank(),    #we made the plot with test phase on the x axis and facetted by group, but changed the aes
axis.text.x=element_blank(),     #so that group seems to be on the x axis (hence we had to remove the test phase x axis labels and ticks)
legend.position='bottom')
raincloud
lineplotJ
